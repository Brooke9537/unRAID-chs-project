Menu="Share:1"
Title="Share 设置"
Tag="share-alt-square"
---
<?PHP
/* Copyright 2005-2019, Lime Technology
 * Copyright 2012-2019, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$width = [123,300];

if ($name == "") {
  /* default values when adding new share */
  $share = ["nameOrig"   => "",
            "name"       => "",
            "comment"    => "",
            "allocator"  => "highwater",
            "floor"      => "",
            "splitLevel" => "",
            "include"    => "",
            "exclude"    => "",
            "useCache"   => "no",
            "cow"        => "auto"];
} elseif (array_key_exists($name, $shares)) {
  /* edit existing share */
  $share = $shares[$name];
} else {
  /* handle share deleted case */
  echo "<p class='notice'>共享 ".htmlspecialchars($name)." 已被删除.</p><input type='button' value='完成' onclick='done()'>";
  return;
}

/* check for empty share */
function shareEmpty($name) {
  return (($files = @scandir('/mnt/user/'.$name)) && (count($files) <= 2));
}

function globalInclude($name) {
  global $var;
  return substr($name,0,4)=='disk' && (!$var['shareUserInclude'] || strpos("{$var['shareUserInclude']},","$name,")!==false);
}

// global shares include/exclude
$disks = array_filter($disks,'my_disks');
$myDisks = array_filter(array_diff(array_keys($disks), explode(',',$var['shareUserExclude'])), 'globalInclude');
?>
> A *Share*, also called a *User Share*, is simply the name of a top-level directory that exists on one or more of your
> storage devices (array and cache).  Each share can be exported for network access.  When browsing a share, we return the
> composite view of all files and subdirectories for which that top-level directory exists on each storage device.
>
> *Read settings from* is used to preset the settings of the new share with the settings of an existing share.
>
> Select the desired share name and press **Read** to copy the settings from the selected source.
<?if ($name):?>
>
> *Write settings to* is used to copy the settings of the current share to one or more other existing shares.
>
> Select the desired destinations and press **Write** to copy the settings to the selected shares.
<?endif;?>

<div id="" class="clone1">
<span class="clone">从中读取设置</span><i class="fa fa-arrow-left clone"></i>
<select name="readshare" size="1" class="clone" onchange="toggleButton('readshare',false)">
<option disabled selected>选择...</option>
<?
foreach ($shares as $list) if ($list['name']!=$name || !$name) echo mk_option("", $list['name'], $list['name']);
?>
</select><input type="button" id="readshare" value="读取" class="clone" onclick="readShare()" disabled>
</div>
<?if ($name):?>
<div id="" class="clone2">
<span class="clone">写入设置到</span><i class="fa fa-arrow-right clone"></i>
<select id="s3" name="writeshare" size="1" multiple="multiple" style="display:none" onchange="toggleButton('writeshare',this.id)">
<?
$rows = [];
foreach ($shares as $list) if ($list['name']!=$name) $rows[] = mk_option("", $list['name'], $list['name']);
if ($rows) echo "<可选>(全部)</option>";
foreach ($rows as $row) echo $row;
?>
</select><input type="button" id="writeshare" value="写入" class="clone" onclick="writeShare()" disabled>
</div>
<?endif;?>

<form markdown="1" name="share_edit" method="POST" action="/update.htm" target="progressFrame" onsubmit="return prepareEdit(this)"<?=$name?" onchange=\"toggleButton('writeshare',true);$('#s3').dropdownchecklist('disable')\">":">"?>
<input type="hidden" name="shareNameOrig" value="<?=htmlspecialchars($share['nameOrig'])?>">

共享名:
: <input type="text" name="shareName" maxlength="40" value="<?=htmlspecialchars($name)?>" pattern="^[^/\\]*$" title="不允许斜线">

> 共享名称最多可以包含 40 个字符, 并且区分大小写, 并具有以下限制:
>
> * 不能包含双引号字符 (")
> * 不能是保留的共享名称之一: flash, cache, cach2, .., disk1, disk2, ..
>
> 强烈建议您简化生活并避免使用特殊字符.

描述:
: <input type="text" name="shareComment" maxlength="256" value="<?=htmlspecialchars($share['comment'])?>">

> 您喜欢的任何字符, 最多 256 个字符.

分配方式:
: <select name="shareAllocator" size="1">
  <?=mk_option($share['allocator'], "highwater", "High-water")?>
  <?=mk_option($share['allocator'], "fillup", "Fill-up")?>
  <?=mk_option($share['allocator'], "mostfree", "Most-free")?>
  </select>

> 此设置确定在创建新文件或目录时, Unraid OS 如何选择要使用的磁盘:
>
> **High-water**
> Choose the lowest numbered disk with free space still above the current *high water mark*.  The
> *high water mark* is initialized with the size of the largest data disk divided by 2.  If no disk
> has free space above the current *high water mark*, divide the *high water mark* by 2 and choose again.
>
> The goal of **High-water** is to write as much data as possible to each disk (in order to minimize
> how often disks need to be spun up), while at the same time, try to keep the same amount of free space on
> each disk (in order to distribute data evenly across the array).
>
> **Fill-up**
> Choose the lowest numbered disk that still has free space above the current **Minimum free space**
> setting.
>
> **Most-free**
> 选择当前具有最大可用空间的磁盘.

最小剩余空间:
: <input type="text" name="shareFloor" maxlength="16" value="<?=htmlspecialchars($share['floor'])?>">

> The *minimum free space* available to allow writing to any disk belonging to the share.<br>
>
> Choose a value which is equal or greater than the biggest single file size you intend to copy to the share.
> Include units KB, MB, GB and TB as appropriate, e.g. 10MB.

拆分级别:
: <select name="shareSplitLevel" size="1">
  <?=mk_option($share['splitLevel'], "", "Automatically split any directory as required")?>
  <?=mk_option($share['splitLevel'], "1", "Automatically split only the top level directory as required")?>
  <?=mk_option($share['splitLevel'], "2", "Automatically split only the top two directory levels as required")?>
  <?=mk_option($share['splitLevel'], "3", "Automatically split only the top three directory levels as required")?>
  <?=mk_option($share['splitLevel'], "4", "Automatically split only the top four directory levels as required")?>
  <?=mk_option($share['splitLevel'], "5", "Automatically split only the top five directory levels as required")?>
  <?=mk_option($share['splitLevel'], "0", "Manual: do not automatically split directories")?>
  </select>

> Determines whether a directory is allowed to expand onto multiple disks.

> **Automatically split any directory as required**
> When a new file or subdirectory needs to be created in a share, Unraid OS first chooses which disk
> it should be created on, according to the configured *Allocation method*.  If the parent directory containing
> the new file or or subdirectory does not exist on this disk, then Unraid OS will first create all necessary
> parent directories, and then create the new file or subdirectory.
>
> **Automatically split only the top level directory as required**
> When a new file or subdirectory is being created in the first level subdirectory of a share, if that first
> level subdirectory does not exist on the disk being written, then the subdirectory will be created first.
> If a new file or subdirectory is being created in the second or lower level subdirectory of a share, the new
> file or subdirectory is created on the same disk as the new file or subdirectory's parent directory.
>
> **Automatically split only the top "N" level directories as required**
> Similar to previous: when a new file or subdirectory is being created, if the parent directory is at level "N",
> and does not exist on the chosen disk, Unraid OS will first create all necessary parent directories.  If the
> parent directory of the new file or subdirectory is beyond level "N", then the new file or subdirectory is
> created on the same disk where the parent directory exists.
>
> **Manual: do not automatically split directories**
> When a new file or subdirectory needs to be created in a share, Unraid OS will only consider disks where the
> parent directory already exists.

包含的磁盘:
: <select id="s1" name="shareInclude" size="1" multiple="multiple" style="display:none">
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['include'], strstr($disks[$disk]['fsType'],':',true))?>
  <?endforeach;?>
  </select>

> Specify the disks which can be used by the share. By default all disks are included; that is, if specific
> disks are not selected here, then the share may expand into *all* array disks.

排除的磁盘:
: <select id="s2" name="shareExclude" size="1" multiple="multiple" style="display:none">
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_luks($disk, $share['exclude'], strstr($disks[$disk]['fsType'],':',true))?>
  <?endforeach;?>
  </select>

> Specify the disks which can *not* be used by the share. By default no disks are excluded.

使用缓存 (用于新文件/目录):
: <select name="shareUseCache" size="1" onchange="setDiskList(this.value) ; setMoverAction(this.value)">
  <?=mk_option($share['useCache'], "no", "否")?>
  <?=mk_option($share['useCache'], "yes", "是")?>
  <?=mk_option($share['useCache'], "only", "唯一")?>
  <?=mk_option($share['useCache'], "prefer", "首选")?>
  </select><span id="moverAction"></span>

> Specify whether new files and directories written on the share can be written onto the Cache disk/pool if present.  
> This setting also affects *mover* behavior.
>
> **否** prohibits new files and subdirectories from being written onto the Cache disk/pool.  
> *Mover* will take no action so any existing files for this share that are on the cache are left there.
>
> **是** indicates that all new files and subdirectories should be written to the Cache disk/pool, provided
> enough free space exists on the Cache disk/pool.  
> If there is insufficient space on the Cache disk/pool, then new files and directories are created on the array.  
> When the *mover* is invoked, files and subdirectories are transferred off the Cache disk/pool and onto the array.
>
> **唯一** indicates that all new files and subdirectories must be writen to the Cache disk/pool.  
> If there is insufficient free space on the Cache disk/pool, *create* operations will fail with *out of space* status.  
> *Mover* will take no action so any existing files for this share that are on the array are left there.
>
> **首选** indicates that all new files and subdirectories should be written to the Cache disk/pool, provided
> enough free space exists on the Cache disk/pool.  
> If there is insufficient space on the Cache disk/pool, then new files and directories are created on the array.  
> When the *mover* is invoked, files and subdirectories are transferred off the array and onto the Cache disk/pool.
>
> **注意:** Mover will never move any files that are currently in use.  
> This means if you want to move files associated with system services such as Docker or VMs then you need to
> disable these services while mover is running.  

启用复制时写入:
: <select name="shareCOW" size="1"<?if ($name):?> disabled<?endif;?>>
  <?=mk_option($share['cow'], "no", "否")?>
  <?=mk_option($share['cow'], "auto", "自动")?>
  </select><?if ($name):?>仅在添加新共享时设置.<?endif;?>

> Set to **No** to cause the *btrfs* NOCOW (No Copy-on-Write) attribute to be set on the share directory
> when created on a device formatted with *btrfs* file system.  Once set, newly created files and
> subdirectories on the device will inherit the NOCOW attribute.  We recommend this setting for shares
> used to store vdisk images, including the Docker loopback image file.  This setting has no effect
> on non-btrfs file systems.
>
> Set to **Auto** for normal operation, meaning COW **will** be in effect on devices formatted with *btrfs*.

<?if (!$name):?>
&nbsp;
: <input type="submit" name="cmdEditShare" value="Add Share"><input type="button" value="完成" onclick="done()">
<?elseif (shareEmpty($name)):?>
共享状态:
: <span class="big">共享为空</span>

> Share does *not* contain any data and may be deleted if not needed any longer.

删除<input type="checkbox" name="confirmDelete" onchange="chkDelete(this.form, this.form.cmdEditShare);">
: <input type="submit" name="cmdEditShare" value="Apply" disabled><input type="button" value="完成" onclick="done()">
<?else:?>
共享状态:
: <span class="big">共享容器数据</span>

> Share can *not* be deleted as long as it contains data. Be aware that some data can be hidden. See also [SMB Settings](/Settings/SMB) -> Hide "dot" files.

&nbsp;
: <input type="submit" name="cmdEditShare" value="Apply" disabled><input type="button" value="完成" onclick="done()">
<?endif;?>
</form>
<script>
$(function() {
  initDropdown(false,true);
<?if ($tabbed):?>
  $('#tab1').bind({click:function(){initDropdown(true,true);}});
<?endif;?>
  setDiskList(document.share_edit.shareUseCache.value);
  setMoverAction(document.share_edit.shareUseCache.value);
  presetSpace(document.share_edit.shareFloor);
});
function initDropdown(remove,create) {
  if (remove) {
    $('#s1').dropdownchecklist('destroy');
    $('#s2').dropdownchecklist('destroy');
<?if ($name):?>
    $('#s3').dropdownchecklist('destroy');
<?endif;?>
  }
  if (create) {
    $('#s1').dropdownchecklist({emptyText:'All', width:<?=$width[1]?>, explicitClose:'...close'});
    $('#s2').dropdownchecklist({emptyText:'None', width:<?=$width[1]?>, explicitClose:'...close'});
<?if ($name):?>
    $("#s3").dropdownchecklist({firstItemChecksAll:true, emptyText:'select...', width:<?=$width[0]?>, explicitClose:'...close'});
<?endif;?>
  }
}
function setDiskList(cache) {
  var onOff = cache=='only' ? 'disable':'enable';
  $('#s1').dropdownchecklist(onOff);
  $('#s2').dropdownchecklist(onOff);
}
function setMoverAction(cache) {
  var textAction;
  switch (cache) {
  case 'yes':  textAction = 'Mover transfers files from cache to array'; break;
  case 'prefer': textAction = 'Mover transfers files from array to cache'; break;
  default:  textAction = 'Mover takes no action'; break;
  }
  document.getElementById("moverAction").innerHTML=textAction;
}
function presetSpace(shareFloor) {
  var unit = ['KB','MB','GB','TB','PB'];
  var scale = shareFloor.value;
  if (scale.replace(/[0-9.,\s]/g,'').length>0) return;
  var base = scale>0 ? Math.floor(Math.log(scale)/Math.log(1000)):0;
  if (base>=unit.length) base = unit.length-1;
  shareFloor.value = (scale/Math.pow(1000, base))+unit[base];
}
// Compose input fields
function prepareEdit(form) {
// Test share name validity
  var share = form.shareName.value.trim();
  if (share.length==0) {
    swal('Missing share name', 'Enter a name for the share', 'error');
    return false;
  }
  if (share.match('^(disk[0-9]+|cache[0-9]*|flash)$')) {
    swal('Invalid share name', 'Do not use reserved names', 'error');
    return false;
  }
  form.shareName.value = share;
// Adjust minimum free space value to selected unit
  var unit = 'KB,MB,GB,TB,PB';
  var scale = form.shareFloor.value;
  var index = unit.indexOf(scale.replace(/[0-9.,\s]/g,'').toUpperCase());
  form.shareFloor.value = scale.replace(/[A-Z\s]/gi,'') * Math.pow(1000, (index>0 ? index/3 : 0))
// Return include as single line input
  var include = '';
  for (var i=0,item; item=form.shareInclude.options[i]; i++) {
    if (item.selected) {
      if (include.length) include += ',';
      include += item.value;
      item.selected = false;
    }
  }
  item = form.shareInclude.options[0];
  item.value = include;
  item.selected = true;
// Return exclude as single line input
  var exclude = '';
  for (var i=0,item; item=form.shareExclude.options[i]; i++) {
    if (item.selected) {
      if (exclude.length) exclude += ',';
      exclude += item.value;
      item.selected = false;
    }
  }
  item = form.shareExclude.options[0];
  item.value = exclude;
  item.selected = true;
  return true;
}
function readShare() {
  var form = document.share_edit;
  var name = $('select[name="readshare"]').val();
  initDropdown(true,false);
  $.get('/webGui/include/ShareData.php',{name:name},function(json) {
    var data = $.parseJSON(json);
    form.shareAllocator.value = data.allocator;
    form.shareFloor.value = data.floor;
    form.shareSplitLevel.value = data.splitLevel;
    form.shareInclude.value = data.include;
    form.shareExclude.value = data.exclude;
    form.shareUseCache.value = data.useCache;
    form.shareCOW.value = data.cow;
    for (var i=0,disk; disk=data.include.split(',')[i]; i++) for (var j=0,include; include=form.shareInclude.options[j]; j++) if (include.value==disk) include.selected=true;
    for (var i=0,disk; disk=data.exclude.split(',')[i]; i++) for (var j=0,exclude; exclude=form.shareExclude.options[j]; j++) if (exclude.value==disk) exclude.selected=true;
    initDropdown(false,true);
  });
  $(form).find('select').trigger('change');
}
function writeShare() {
  var data = {}, copied = false;
  data.shareAllocator = '<?=addslashes(htmlspecialchars($share['allocator']))?>';
  data.shareFloor = '<?=addslashes(htmlspecialchars($share['floor']))?>';
  data.shareSplitLevel = '<?=addslashes(htmlspecialchars($share['splitLevel']))?>';
  data.shareInclude = '<?=addslashes(htmlspecialchars($share['include']))?>';
  data.shareExclude = '<?=addslashes(htmlspecialchars($share['exclude']))?>';
  data.shareUseCache = '<?=addslashes(htmlspecialchars($share['useCache']))?>';
  data.cmdEditShare = 'Apply';
  $('select#s3 option').map(function() {
    if ($(this).prop('selected')==true && $(this).val()!='(All)') {
      data.shareNameOrig = $(this).val();
      data.shareName = $(this).val();
      $.post('/update.htm', data);
      copied = true;
    }
  });
  if (copied) swal({title:'克隆完成',text:'共享设置已克隆到所选共享',type:'success'},function(){refresh();});
}
</script>
